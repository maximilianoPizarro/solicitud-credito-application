package com.credito.webapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClienteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClienteAllPropertiesEquals(Cliente expected, Cliente actual) {
        assertClienteAutoGeneratedPropertiesEquals(expected, actual);
        assertClienteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClienteAllUpdatablePropertiesEquals(Cliente expected, Cliente actual) {
        assertClienteUpdatableFieldsEquals(expected, actual);
        assertClienteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClienteAutoGeneratedPropertiesEquals(Cliente expected, Cliente actual) {
        assertThat(expected)
            .as("Verify Cliente auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClienteUpdatableFieldsEquals(Cliente expected, Cliente actual) {
        assertThat(expected)
            .as("Verify Cliente relevant properties")
            .satisfies(e -> assertThat(e.numeroCliente).as("check numeroCliente").isEqualTo(actual.numeroCliente))
            .satisfies(e -> assertThat(e.nombre).as("check nombre").isEqualTo(actual.nombre))
            .satisfies(e -> assertThat(e.apellido).as("check apellido").isEqualTo(actual.apellido))
            .satisfies(e -> assertThat(e.fechaNacimiento).as("check fechaNacimiento").isEqualTo(actual.fechaNacimiento))
            .satisfies(e -> assertThat(e.tipoDocumento).as("check tipoDocumento").isEqualTo(actual.tipoDocumento))
            .satisfies(e -> assertThat(e.numeroDocumento).as("check numeroDocumento").isEqualTo(actual.numeroDocumento))
            .satisfies(e -> assertThat(e.email).as("check email").isEqualTo(actual.email))
            .satisfies(e -> assertThat(e.telefono).as("check telefono").isEqualTo(actual.telefono));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClienteUpdatableRelationshipsEquals(Cliente expected, Cliente actual) {}
}
