package com.credito.webapp.domain;

import static com.credito.webapp.domain.AssertUtils.bigDecimalCompareTo;
import static com.credito.webapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class CuentaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCuentaAllPropertiesEquals(Cuenta expected, Cuenta actual) {
        assertCuentaAutoGeneratedPropertiesEquals(expected, actual);
        assertCuentaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCuentaAllUpdatablePropertiesEquals(Cuenta expected, Cuenta actual) {
        assertCuentaUpdatableFieldsEquals(expected, actual);
        assertCuentaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCuentaAutoGeneratedPropertiesEquals(Cuenta expected, Cuenta actual) {
        assertThat(expected)
            .as("Verify Cuenta auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCuentaUpdatableFieldsEquals(Cuenta expected, Cuenta actual) {
        assertThat(expected)
            .as("Verify Cuenta relevant properties")
            .satisfies(e -> assertThat(e.numeroCuenta).as("check numeroCuenta").isEqualTo(actual.numeroCuenta))
            .satisfies(e ->
                assertThat(e.fechaApertura)
                    .as("check fechaApertura")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.fechaApertura)
            )
            .satisfies(e ->
                assertThat(e.montoOtorgado).as("check montoOtorgado").usingComparator(bigDecimalCompareTo).isEqualTo(actual.montoOtorgado)
            )
            .satisfies(e ->
                assertThat(e.saldoPendiente)
                    .as("check saldoPendiente")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.saldoPendiente)
            )
            .satisfies(e -> assertThat(e.estado).as("check estado").isEqualTo(actual.estado))
            .satisfies(e ->
                assertThat(e.fechaCierre).as("check fechaCierre").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.fechaCierre)
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCuentaUpdatableRelationshipsEquals(Cuenta expected, Cuenta actual) {
        assertThat(expected)
            .as("Verify Cuenta relationships")
            .satisfies(e -> assertThat(e.cliente).as("check cliente").isEqualTo(actual.cliente))
            .satisfies(e -> assertThat(e.plan).as("check plan").isEqualTo(actual.plan));
    }
}
