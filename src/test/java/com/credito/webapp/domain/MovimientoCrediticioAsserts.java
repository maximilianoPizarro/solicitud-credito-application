package com.credito.webapp.domain;

import static com.credito.webapp.domain.AssertUtils.bigDecimalCompareTo;
import static com.credito.webapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class MovimientoCrediticioAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovimientoCrediticioAllPropertiesEquals(MovimientoCrediticio expected, MovimientoCrediticio actual) {
        assertMovimientoCrediticioAutoGeneratedPropertiesEquals(expected, actual);
        assertMovimientoCrediticioAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovimientoCrediticioAllUpdatablePropertiesEquals(MovimientoCrediticio expected, MovimientoCrediticio actual) {
        assertMovimientoCrediticioUpdatableFieldsEquals(expected, actual);
        assertMovimientoCrediticioUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovimientoCrediticioAutoGeneratedPropertiesEquals(MovimientoCrediticio expected, MovimientoCrediticio actual) {
        assertThat(expected)
            .as("Verify MovimientoCrediticio auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovimientoCrediticioUpdatableFieldsEquals(MovimientoCrediticio expected, MovimientoCrediticio actual) {
        assertThat(expected)
            .as("Verify MovimientoCrediticio relevant properties")
            .satisfies(e ->
                assertThat(e.fechaMovimiento)
                    .as("check fechaMovimiento")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.fechaMovimiento)
            )
            .satisfies(e -> assertThat(e.tipo).as("check tipo").isEqualTo(actual.tipo))
            .satisfies(e -> assertThat(e.monto).as("check monto").usingComparator(bigDecimalCompareTo).isEqualTo(actual.monto))
            .satisfies(e -> assertThat(e.descripcion).as("check descripcion").isEqualTo(actual.descripcion))
            .satisfies(e -> assertThat(e.referenciaExterna).as("check referenciaExterna").isEqualTo(actual.referenciaExterna));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovimientoCrediticioUpdatableRelationshipsEquals(MovimientoCrediticio expected, MovimientoCrediticio actual) {
        assertThat(expected)
            .as("Verify MovimientoCrediticio relationships")
            .satisfies(e -> assertThat(e.cuenta).as("check cuenta").isEqualTo(actual.cuenta));
    }
}
