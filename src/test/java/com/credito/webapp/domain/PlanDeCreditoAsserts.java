package com.credito.webapp.domain;

import static com.credito.webapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PlanDeCreditoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanDeCreditoAllPropertiesEquals(PlanDeCredito expected, PlanDeCredito actual) {
        assertPlanDeCreditoAutoGeneratedPropertiesEquals(expected, actual);
        assertPlanDeCreditoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanDeCreditoAllUpdatablePropertiesEquals(PlanDeCredito expected, PlanDeCredito actual) {
        assertPlanDeCreditoUpdatableFieldsEquals(expected, actual);
        assertPlanDeCreditoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanDeCreditoAutoGeneratedPropertiesEquals(PlanDeCredito expected, PlanDeCredito actual) {
        assertThat(expected)
            .as("Verify PlanDeCredito auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanDeCreditoUpdatableFieldsEquals(PlanDeCredito expected, PlanDeCredito actual) {
        assertThat(expected)
            .as("Verify PlanDeCredito relevant properties")
            .satisfies(e -> assertThat(e.nombre).as("check nombre").isEqualTo(actual.nombre))
            .satisfies(e -> assertThat(e.descripcion).as("check descripcion").isEqualTo(actual.descripcion))
            .satisfies(e -> assertThat(e.tipo).as("check tipo").isEqualTo(actual.tipo))
            .satisfies(e ->
                assertThat(e.tasaInteres).as("check tasaInteres").usingComparator(bigDecimalCompareTo).isEqualTo(actual.tasaInteres)
            )
            .satisfies(e -> assertThat(e.plazoMaximo).as("check plazoMaximo").isEqualTo(actual.plazoMaximo));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanDeCreditoUpdatableRelationshipsEquals(PlanDeCredito expected, PlanDeCredito actual) {}
}
